<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.complitex.flexbuh.common.service.user.UserBean">
    <resultMap id="userResultMap" type="org.complitex.flexbuh.common.entity.user.User">
		<id column="id" property="id"/>
        <result column="login" property="login"/>
        <result column="session_id" property="sessionId"/>

        <result column="first_name" property="firstName"/>
        <result column="middle_name" property="middleName"/>
        <result column="last_name" property="lastName"/>
        <result column="birthday" property="birthday"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>

        <association property="address" resultMap="org.complitex.flexbuh.common.service.AddressBean.address1ResultMap"/>

        <collection property="roles" ofType="string">
            <result column="group_name"/>
        </collection>

    </resultMap>

    <sql id="userColumns">
        uc.*,
        gc.`group_name` as `group_name`,
        <include refid="org.complitex.flexbuh.common.service.AddressBean.address1Columns"/>
    </sql>

    <sql id="userFilter">
        from `user` u
        <if test="role != null">
            left join `usergroup` gc on u.`login` = gc.`login`
        </if>

        <where>
            <if test="login != null">u.login like concat('%', #{login}, '%')</if>
            <if test="firstName != null">and u.first_name like concat('%', #{firstName}, '%')</if>
            <if test="middleName != null">and u.middle_name like concat('%', #{middleName}, '%')</if>
            <if test="lastName != null">and u.last_name like concat('%', #{lastName}, '%')</if>
            <if test="role != null">and gc.`group_name` in (
              <foreach collection="roles" separator="," item="item">#{item}</foreach>)
            </if>
        </where>

        <if test="sortProperty == 'login'">
            order by u.`login` <choose><when test="ascending">asc</when><otherwise>desc</otherwise></choose>
        </if>
    </sql>

    <insert id="insertUser" parameterType="org.complitex.flexbuh.common.entity.user.User" keyProperty="id" useGeneratedKeys="true">
        insert into `user` (`login`, `password`, `session_id`, `first_name`, `middle_name`, `last_name`, `birthday`,
        `email`, `phone`<if test="address != null">, `address_id`</if>)
        values (#{login}, #{password}, #{sessionId}, #{firstName}, #{middleName}, #{lastName}, #{birthday},
        #{email}, #{phone}<if test="address != null">, #{address.id}</if>)
    </insert>

    <update id="updateUser" parameterType="org.complitex.flexbuh.common.entity.user.User">
        update `user`
        <set>
            <if test="password != null"> `password` = #{password},</if>
            <if test="sessionId != null"> `session_id` = #{sessionId},</if>
            <choose><when test="address != null"> `address_id` = #{address.id},</when><otherwise>`address_id`=null,</otherwise></choose>
            `first_name` = #{firstName}, `middle_name` = #{middleName}, `last_name` = #{lastName}, `birthday` = #{birthday},
            `email` = #{email}, `phone` = #{phone}
        </set>
        where id = #{id}
    </update>

    <select id="selectUsers" resultMap="userResultMap" parameterType="org.complitex.flexbuh.common.service.user.UserFilter">
        select <include refid="userColumns"/>
        from
        (select u.*
        <include refid="userFilter"/>
        limit #{first}, #{count}
        ) as uc
        left join `usergroup` gc on uc.`login` = gc.`login` and gc.`group_name` != 'AUTHORIZED'
        left join `address` address1 on address1.`id` = uc.`address_id`
    </select>

    <select id="selectUsersCount" resultType="int" parameterType="org.complitex.flexbuh.common.service.user.UserFilter">
        select count(distinct u.id)
        <include refid="userFilter"/>
    </select>

    <select id="selectUserBySessionId" parameterType="long" resultMap="userResultMap">
        select <include refid="userColumns"/>
        from `user` uc
        left join `usergroup` gc on uc.`login` = gc.`login` and gc.`group_name` != 'AUTHORIZED'
        left join `address` address1 on address1.`id` = uc.`address_id`
        where uc.`session_id` = #{sessionId}
    </select>

    <select id="selectUserById" parameterType="long" resultMap="userResultMap">
        select <include refid="userColumns"/>
        from `user` uc
        left join `usergroup` gc on uc.`login` = gc.`login` and gc.`group_name` != 'AUTHORIZED'
        left join `address` address1 on address1.`id` = uc.`address_id`
        where uc.`id` = #{id}
        order by gc.`group_name`
    </select>

    <select id="selectUserByLogin" parameterType="string" resultMap="userResultMap">
        select <include refid="userColumns"/>
        from `user` uc
        left join `usergroup` gc on uc.`login` = gc.`login` and gc.`group_name` != 'AUTHORIZED'
        left join `address` address1 on address1.`id` = uc.`address_id`
        where uc.`login` = #{login}
        order by gc.`group_name`
    </select>

    <select id="isLoginExist" parameterType="string" resultType="boolean">
        select count(*) > 0 from `user` where `login` = #{name}
    </select>

    <!--User Group-->
    <insert id="insertUserRole" parameterType="map">
        insert into `usergroup` (`login`, `group_name`) values (#{login}, #{role})
    </insert>

    <delete id="deleteUserRole" parameterType="map">
        delete from `usergroup` where `login` = #{login} and `group_name` = #{role}
    </delete>

    <select id="selectSharedUsers" parameterType="long" resultMap="userResultMap">
        select <include refid="userColumns"/> from `user` uc
            left join `usergroup` gc on uc.`login` = gc.`login` and gc.`group_name` != 'AUTHORIZED'
            left join `address` address1 on address1.`id` = uc.`address_id`
            left join `share` s on (s.`shared_to_session_id` = uc.`session_id`)
        where s.`session_id` = #{sessionId}
    </select>

    <select id="findUser" parameterType="string" resultMap="userResultMap">
        select <include refid="userColumns"/> from `user` uc
            left join `usergroup` gc on uc.`login` = gc.`login` and gc.`group_name` != 'AUTHORIZED'
            left join `address` address1 on address1.`id` = uc.`address_id`
        where  upper(uc.`login`) = upper(#{s}) or  upper(uc.`email`) = upper(#{s})
          or upper(concat_ws(' ', uc.last_name, uc.first_name, uc.middle_name)) = upper(#{s})
    </select>

</mapper>