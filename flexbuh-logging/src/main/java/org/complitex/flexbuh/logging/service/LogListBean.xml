<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.complitex.flexbuh.logging.service.LogListBean">
    <resultMap id="logResultMap" type="org.complitex.flexbuh.logging.entity.Log">
        <id column="id" property="id"/>
        <result column="timestmp" property="time"/>
        <result column="caller_class" property="controller"/>
        <result column="formatted_message" property="description"/>
        <result column="level_string" property="level"/>
        <result column="logger_name" property="loggerName"/>

        <collection property="eventProperties" resultMap="eventPropertyResultMap" select="selectEventProperty" column="id"/>
    </resultMap>

    <resultMap id="eventPropertyResultMap" type="org.complitex.flexbuh.common.logging.EventProperty">
        <result column="mapped_key" property="mappedKey"/>
        <result column="mapped_value" property="mappedValue"/>
    </resultMap>

    <sql id="logFilterFromWhere">
      from `logging_event` le
        left join `logging_event_property` as lep_session_id on (le.`event_id` = lep_session_id.`event_id`
          and lep_session_id.`mapped_key` = 'SESSION_ID')
        left join `logging_event_property` as lep_login on (le.`event_id` = lep_login.`event_id`
          and lep_login.`mapped_key` = 'LOGIN')
        left join `logging_event_property` as lep_model on (le.`event_id` = lep_model.`event_id`
          and lep_model.`mapped_key` = 'MODEL_CLASS')
        left join `logging_event_property` as lep_objectId on (le.`event_id` = lep_objectId.`event_id`
          and lep_objectId.`mapped_key` = 'OBJECT_ID')
        left join `logging_event_property` as lep_category on (le.`event_id` = lep_category.`event_id`
          and lep_category.`mapped_key` = 'CATEGORY')

        <where>
            <if test="afterTime != null">and `timestmp` > #{afterTime}</if>
            <if test="beforeTime != null">and #{beforeTime} > `timestmp`</if>
            <if test="logger_name != null">and `logger_name` = #{logger_name} </if>
            <if test="formatted_message != null">and `formatted_message` like CONCAT('%',#{formatted_message},'%')</if>
            <if test="level_string != null">and `level_string` = #{level_string}</if>
            <if test="module != null">and `logger_name` like CONCAT(#{module},'%')</if>
            and `level_string` != 'DEBUG'

            <if test="session_id != null">and lep_session_id.`mapped_value` = #{session_id}</if>
            <if test="login != null">and lep_login.`mapped_value` like CONCAT('%',#{login},'%')</if>
            <if test="model != null">and lep_model.`mapped_value` = #{model}</if>
            <if test="objectId != null">and lep_objectId.`mapped_value` = #{objectId}</if>
            <if test="category != null">and lep_category.`mapped_value` = #{category.name}</if>
        </where>
    </sql>

    <select id="selectLogs" resultMap="logResultMap" parameterType="org.complitex.flexbuh.logging.service.LogFilter">
        select distinct le.`event_id` as id, `timestmp`, `caller_class`, `logger_name`, `formatted_message`, `level_string`
        <include refid="logFilterFromWhere"/>
        <choose>
            <when test="sortProperty == 'timestmp'">
                order by `timestmp` ${asc}
            </when>
            <when test="sortProperty == 'logger_name'">
                order by `logger_name` ${asc}
            </when>
            <when test="sortProperty == 'formatted_message'">
                order by `formatted_message` ${asc}
            </when>
            <when test="sortProperty == 'level_string'">
                order by `level_string` ${asc}
            </when>
            <when test="sortProperty == 'module'">
                order by SUBSTRING_INDEX(`logger_name`, '.', 4) ${asc}
            </when>

            <when test="sortProperty == 'SESSION_ID'">
                order by lep_session_id.`mapped_value` ${asc}
            </when>
            <when test="sortProperty == 'LOGIN'">
                order by lep_login.`mapped_value` ${asc}
            </when>
            <when test="sortProperty == 'MODEL_CLASS'">
                order by lep_model.`mapped_value` ${asc}
            </when>
            <when test="sortProperty == 'OBJECT_ID'">
                order by lep_objectId.`mapped_value` ${asc}
            </when>
            <when test="sortProperty == 'CATEGORY'">
                order by lep_category.`mapped_value` ${asc}
            </when>
        </choose>
        limit #{first}, #{count}
    </select>

    <select id="selectEventProperty" resultMap="eventPropertyResultMap" parameterType="long">
        select * from `logging_event_property` where `event_id` = #{id}
    </select>

    <select id="selectLogsCount" resultType="int">
        select count(distinct le.`event_id`)
        <include refid="logFilterFromWhere"/>
    </select>

    <select id="selectModules" resultType="string">
        select substring_index(`logger_name`, '.', 4) as `module` from `logging_event` group by `module`;
    </select>

    <select id="selectControllers" resultType="string">
        select `caller_class` from `logging_event` where `caller_class` like 'org.complitex.flexbuh.%'
            group by `caller_class` order by `caller_class`
    </select>

    <select id="selectLoggerNames" resultType="string">
        select `logger_name` from `logging_event` where `caller_class` like 'org.complitex.flexbuh.%'
            group by `logger_name` order by `logger_name`
    </select>

    <select id="selectModels" resultType="string">
        select `mapped_value` from `logging_event_property` where `mapped_key` = 'MODEL_CLASS' and `mapped_value` is not null
            group by `mapped_value` order by `mapped_value`
    </select>
</mapper>