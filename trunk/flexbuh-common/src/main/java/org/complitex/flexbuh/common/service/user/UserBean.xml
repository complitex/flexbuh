<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.complitex.flexbuh.common.service.user.UserBean">
    <resultMap id="userResultMap" type="org.complitex.flexbuh.common.entity.user.User">
		<id column="id" property="id"/>
        <result column="login" property="login"/>
        <result column="session_id" property="sessionId"/>

        <result column="first_name" property="firstName"/>
        <result column="middle_name" property="middleName"/>
        <result column="last_name" property="lastName"/>
        <result column="birthday" property="birthday"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>

        <association property="address" javaType="org.complitex.flexbuh.common.entity.Address">
            <result column="zip_code" property="zipCode"/>
            <result column="country" property="country"/>
            <result column="region" property="region" />
            <result column="area" property="area" />
            <result column="city" property="city" />
            <result column="city_type" property="cityType" />
            <result column="street" property="street" />
            <result column="street_type" property="streetType" />
            <result column="building" property="building" />
            <result column="apartment" property="apartment" />
        </association>

        <collection property="roles" ofType="string">
            <result column="group_name"/>
        </collection>

        <collection property="organizations" column="id"
                    ofType="org.complitex.flexbuh.common.entity.organization.OrganizationBase">
            <result column="organization_id" property="id"/>
            <result column="organization_version" property="version"/>
            <result column="organization_name" property="name"/>
            <result column="organization_type" property="type"/>
            <result column="organization_deleted" property="deleted"/>
            <result column="organization_entry_into_force_date" property="entryIntoForceDate"/>
            <result column="organization_completion_date" property="completionDate"/>
        </collection>
    </resultMap>

    <sql id="userColumns">
        uc.*,
        gc.`group_name` as `group_name`,
        o.`id` as `organization_id`, o.`version` as `organization_version`,
        o.`name` as `organization_name`, o.`type` as `organization_type`,
        o.`deleted` as `organization_deleted`,
        o.`entry_into_force_date` as `organization_entry_into_force_date`,
        o.`completion_date` as `organization_completion_date`
    </sql>

    <sql id="userFilter">
        from `user` u
        <if test="role != null">
            left join `usergroup` gc on u.`login` = gc.`login`
        </if>

        <where>
            <if test="login != null">u.login like concat('%', #{login}, '%')</if>
            <if test="firstName != null">and u.first_name like concat('%', #{firstName}, '%')</if>
            <if test="middleName != null">and u.middle_name like concat('%', #{middleName}, '%')</if>
            <if test="lastName != null">and u.last_name like concat('%', #{lastName}, '%')</if>
            <if test="role != null">and gc.`group_name` in (
              <foreach collection="roles" separator="," item="item">#{item}</foreach>)
            </if>
        </where>

        <if test="sortProperty == 'login'">
            order by u.`login` <choose><when test="ascending">asc</when><otherwise>desc</otherwise></choose>
        </if>
    </sql>

    <insert id="insertUser" parameterType="org.complitex.flexbuh.common.entity.user.User" keyProperty="id" useGeneratedKeys="true">
        insert into `user` (`login`, `password`, `session_id`, `first_name`, `middle_name`, `last_name`, `birthday`,
        `email`, `phone`, `zip_code`, `country`, `region`, `area`, `city`, `city_type`, `street`, `street_type`, `building`, `apartment`)
        values (#{login}, #{password}, #{sessionId}, #{firstName}, #{middleName}, #{lastName}, #{birthday},
        #{email}, #{phone}, #{address.zipCode}, #{address.country}, #{address.region}, #{address.area}, #{address.city},
        #{address.cityType}, #{address.street}, #{address.streetType}, #{address.building}, #{address.apartment})
    </insert>

    <update id="updateUser" parameterType="org.complitex.flexbuh.common.entity.user.User">
        update `user`
        <set>
            <if test="password != null"> `password` = #{password},</if>
            <if test="sessionId != null"> `session_id` = #{sessionId},</if>
            `first_name` = #{firstName}, `middle_name` = #{middleName}, `last_name` = #{lastName}, `birthday` = #{birthday},
            `email` = #{email}, `phone` = #{phone}, `zip_code` = #{address.zipCode}, `country` = #{address.country},
            `region` = #{address.region}, `area` = #{address.area}, `city` = #{address.city}, `city_type` = #{address.cityType},
            `street` = #{address.street}, `street_type` = #{address.streetType}, `building` = #{address.building},
            `apartment` = #{address.apartment}
        </set>
        where id = #{id}
    </update>

    <select id="selectUsers" resultMap="userResultMap" parameterType="org.complitex.flexbuh.common.service.user.UserFilter">
        select <include refid="userColumns"/>
        from
        (select u.*
        <include refid="userFilter"/>
        limit #{first}, #{count}
        ) as uc
        left join `usergroup` gc on uc.`login` = gc.`login`
        left join `user_organization` uo on uc.`login` = uo.`login`
        left join `organization` o on uo.`organization_id` = o.`id`
    </select>

    <select id="selectUsersCount" resultType="int" parameterType="org.complitex.flexbuh.common.service.user.UserFilter">
        select count(distinct u.id)
        <include refid="userFilter"/>
    </select>

    <select id="selectUserBySessionId" parameterType="long" resultMap="userResultMap">
        select <include refid="userColumns"/>
        from `user` uc
        left join `usergroup` gc on uc.`login` = gc.`login`
        left join `user_organization` uo on uc.`login` = uo.`login`
        left join `organization` o on uo.`organization_id` = o.`id`
        where uc.`session_id` = #{sessionId}
    </select>

    <select id="selectUserById" parameterType="long" resultMap="userResultMap">
        select <include refid="userColumns"/>
        from `user` uc
        left join `usergroup` gc on uc.`login` = gc.`login`
        left join `user_organization` uo on uc.`login` = uo.`login`
        left join `organization` o on uo.`organization_id` = o.`id`
        where uc.`id` = #{id}
        order by gc.`group_name`
    </select>

    <select id="selectUserByLogin" parameterType="string" resultMap="userResultMap">
        select <include refid="userColumns"/>
        from `user` uc
        left join `usergroup` gc on uc.`login` = gc.`login`
        left join `user_organization` uo on uc.`login` = uo.`login`
        left join `organization` o on uo.`organization_id` = o.`id`
        where uc.`login` = #{login}
        order by gc.`group_name`
    </select>

    <select id="isLoginExist" parameterType="string" resultType="boolean">
        select count(*) > 0 from `user` where `login` = #{name}
    </select>

    <!--User Group-->
    <insert id="insertUserRole" parameterType="map">
        insert into `usergroup` (`login`, `group_name`) values (#{login}, #{role})
    </insert>

    <delete id="deleteUserRole" parameterType="map">
        delete from `usergroup` where `login` = #{login} and `group_name` = #{role}
    </delete>

    <!--User organization-->
    <insert id="insertUserOrganization" parameterType="map">
        insert into `user_organization` (`login`, `organization_id`) values (#{login}, #{organizationId})
    </insert>

    <delete id="deleteUserOrganization" parameterType="map">
        delete from `user_organization` where `login` = #{login} and `organization_id` = #{organizationId}
    </delete>

    <select id="selectSharedUsers" parameterType="long" resultMap="userResultMap">
        select <include refid="userColumns"/> from `user` uc
            left join `usergroup` gc on uc.`login` = gc.`login`
            left join `user_organization` uo on uc.`login` = uo.`login`
            left join `organization` o on uo.`organization_id` = o.`id`
            left join `share` s on (s.`shared_to_session_id` = uc.`session_id`)
        where s.`session_id` = #{sessionId}
    </select>

    <select id="findUserByLoginOrEmail" parameterType="string" resultMap="userResultMap">
        select <include refid="userColumns"/> from `user` uc
            left join `usergroup` gc on uc.`login` = gc.`login`
            left join `user_organization` uo on uc.`login` = uo.`login`
            left join `organization` o on uo.`organization_id` = o.`id`
        where uc.`login` = #{s} or uc.`email` = #{s}
    </select>

</mapper>