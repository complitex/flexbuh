<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.complitex.flexbuh.logging.service.LogListBean">
    <resultMap id="logResultMap" type="org.complitex.flexbuh.logging.entity.Log">
        <id column="id" property="id"/>
        <result column="timestmp" property="time"/>
        <result column="caller_class" property="controller"/>
        <result column="formatted_message" property="description"/>
        <result column="level_string" property="level"/>
        <result column="logger_name" property="loggerName"/>

        <collection property="eventProperties" ofType="org.complitex.flexbuh.common.logging.EventProperty">
            <result column="mapped_key" property="mappedKey"/>
            <result column="mapped_value" property="mappedValue"/>
        </collection>
    </resultMap>

    <sql id="logFilterPropertyWhere">
        <where>
            <if test="login != null">lep2.`mapped_key` = 'LOGIN' and lep2.`mapped_value` like CONCAT('%',#{login},'%')</if>
            <if test="model != null">or lep2.`mapped_key` = 'MODEL' and lep2.`mapped_value` = #{model}</if>
            <if test="objectId != null">or lep2.`mapped_key` = 'OBJECT_ID' and lep2.`mapped_value` = #{objectId}</if>
            <if test="category != null">or lep2.`mapped_key` = 'CATEGORY' and lep2.`mapped_value` = #{category.value}</if>
        </where>
    </sql>

    <sql id="logFilterWhere">
        <where>


            <if test="afterTime != null">and `timestmp` > #{afterTime}</if>
            <if test="beforeTime != null">and #{beforeTime} > `timestmp`</if>
            <choose>
                <when test="caller_class != null">and `caller_class` = #{caller_class}</when>
                <otherwise>and `caller_class` like 'org.complitex.flexbuh.%'</otherwise>
            </choose>
            <if test="formatted_message != null">and `formatted_message` like CONCAT('%',#{formatted_message},'%')</if>
            <if test="level_string != null">and `level_string` = #{level_string}</if>
            <if test="module != null">
                and `logger_name` like CONCAT(#{module},'%')
            </if>
        </where>
    </sql>

    <select id="selectLogs" resultMap="logResultMap" parameterType="org.complitex.flexbuh.logging.service.LogFilter">
        select le.event_id as id, `timestmp`, `caller_class`, `logger_name`, `formatted_message`, `level_string`,
        lep.`mapped_key`, lep.`mapped_value`, le.`logger_name`
        from (
        select * from `logging_event` <include refid="logFilterWhere"/>
        <if test="sortProperty != null and sortProperty != 'login' and sortProperty != 'module'
                            and sortProperty != 'model' and sortProperty != 'objectId' and sortProperty != 'category'">
            order by `${sortProperty}` <choose><when test="ascending">asc</when><otherwise>desc</otherwise></choose>
            limit #{first}, #{count}
        </if>
        ) as le
        left join `logging_event_property` as lep on le.event_id = lep.event_id
        <if test="sortProperty == 'login' or sortProperty == 'module' or sortProperty == 'model'
			or sortProperty == 'objectId' or sortProperty == 'category'">
            left join `logging_event_property` as lep1 on (le.event_id = lep1.event_id and lep1.`mapped_key` = #{sortProperty})
            order by lep1.`mapped_value` <choose><when test="ascending">asc</when><otherwise>desc</otherwise></choose>
        </if>
    </select>

    <select id="selectLogsCount" resultType="int">
        select count(*) from `logging_event` <include refid="logFilterWhere"/>
    </select>

    <select id="selectModules" resultType="string">
        select substring_index(`logger_name`, '.', 4) as `module` from `logging_event` group by `module`;
    </select>

    <select id="selectControllers" resultType="string">
        select `caller_class` from `logging_event` where `caller_class` like 'org.complitex.flexbuh.%'
            group by `caller_class` order by `caller_class`
    </select>

    <select id="selectLoggerNames" resultType="string">
        select `logger_name` from `logging_event` where `caller_class` like 'org.complitex.flexbuh.%'
            group by `logger_name` order by `logger_name`
    </select>

    <select id="selectModels" resultType="string">
        select `mapped_value` from `logging_event_property` where `mapped_key` = 'MODEL' and `mapped_value` is not null
            group by `mapped_value` order by `mapped_value`
    </select>
</mapper>